---
- name: Configure backup machine
  hosts: backup
  vars:

    # remote host where to push backups
    backup_remote: "u425518.your-storagebox.de"

    # remote host user
    proxmox_backup_remote_username: "u425518-sub3"

    # backup folder where data are stored
    backup_data_root: /mnt/datastore/

    # proxmox backup server datastores
    pbs_datastores:
      - {"name":"prod-server-backup", "path":"{{ backup_data_root }}/prod-server-backup"}

    # Nintendo 3DS parameters for backup job address_3ds: 192.168.1.99
    port_3ds: 5000

    pbs_password: "{{ vault_pbs_password }}"

  tasks:
    - name: Install some packages
      ansible.builtin.apt:
        name:
          - ftp
          - ncftp
          - netcat-traditional
          - curl
          - gawk
          - grep
          - rsync
        state: present
        update_cache: true

    - name: Install proxmox backup server
      block:
        - name: Add proxmox backup server repo key
          ansible.builtin.get_url:
            url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
            dest: /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
            mode: '644'

        - name: Add proxmox backup server repository into sources list
          ansible.builtin.apt_repository:
            repo: >
              deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg]
              http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription
            filename: proxmox_backup_server
            state: present

        - name: Install pbs and update cache
          ansible.builtin.apt:
            name: proxmox-backup-server
            state: present
            update_cache: true

    - name: Setup remote synchronization with hetzner storagebox
      block:
        - name: "Configure ssh parameters for the {{ backup_remote }}"
          ansible.builtin.template:
            src: "backup/backup_ssh_config.j2"
            dest: "/root/.ssh/config"
            mode: '644'

        - name: Setup data syncronization with a remote site
          ansible.builtin.cron:
            name: "backup sync"
            minute: "0"
            hour: "22"
            job: >
              rsync
              --exclude "lost+found"
              -Pavr
              --delete "{{ backup_data_root }}"
              "{{ backup_remote }}:{{ ansible_hostname }}" |
              tee /var/log/backup-sync.log;
              echo -e "Subject: backup-sync status \n$(cat /var/log/backup-sync.log)" |
              sendmail root

    - name: Create datastore {{ item.name }}
      ansible.builtin.command:
        cmd: "proxmox-backup-manager datastore create {{ item.name }} {{ item.path }}"
        creates: '{{ item.path }}'
      loop: "{{ pbs_datastores }}"

    - name: Configure the new datastores on all pbs on the proxmox hosts
      block:
        - name: Get backupper fingerprints
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: >
              set -o pipefail &&
              proxmox-backup-manager cert info | grep Fingerprint | awk -F':' '{ $1=""; print $0}'
          register: fingerprints

        - name: Get storage status
          delegate_to: localhost
          ansible.builtin.lineinfile:
            name: /etc/pve/storage.cfg
            line: "pbs: {{ item[0] }}"
            state: present
          check_mode: true
          register: storages_status
          loop: "{{ groups['backup'] | product(pbs_datastores | json_query('[*].name')) }}"

        - name: Add storage to proxmox
          delegate_to: localhost
          when: storage_status.changed
          ansible.builtin.command:
            cmd: >
              pvesm add pbs {{ item[0] }}
              --server {{ item[0] }}
              --datastore '{{ item[1] }}'
              --fingerprint "{{ fingerprints.results[index].stdout | b64decode | trim | replace(' ',':')}}"
              --username root@pam
              --password {{ pbs_password }}
              --encryption-key autogen
          loop: "{{ groups['backup'] | product(pbs_datastores | json_query('[*].name')) }}"
          loop_control:
            index_var: index

    - name: Setup nintendo 3DS backup
      block:

        - name: Copy 3ds backup script
          ansible.builtin.template:
            src: backup/backup_3ds.sh.j2
            dest: /usr/local/bin/backup_3ds.sh
            mode: '755'

        - name: Add 3ds backup cronjob
          ansible.builtin.cron:
            name: "3ds backup"
            job: "/usr/local/bin/backup_3ds.sh backup >> /var/log/backup_3ds.log 2>&1"

        - name: Add 3ds backup reset cronjob
          ansible.builtin.cron:
            name: "3ds backup"
            minute: "*/10"
            job: "/usr/local/bin/backup_3ds.sh reset >> /var/log/backup_3ds.log 2>&1"
